Teste unitário: 
	- https://softwaretestingfundamentals.com/test-definition/
	- https://www.martin-brennan.com/why-xunit/
	- http://wiki.c2.com/?ArrangeActAssert
	- http://wiki.c2.com/?UnitTest
	- https://martinfowler.com/bliki/GivenWhenThen.html
	- https://en.wikipedia.org/wiki/Equivalence_partitioning
	- https://en.wikipedia.org/wiki/Boundary-value_analysis
	- https://docs.microsoft.com/pt-br/dotnet/architecture/modern-web-apps-azure/test-asp-net-core-mvc-apps#test-naming
	- https://andrewlock.net/creating-parameterised-tests-in-xunit-with-inlinedata-classdata-and-memberdata/
	- https://softwaretestingfundamentals.com/regression-testing/
	- https://www.casadocodigo.com.br/products/livro-tdd-dotnet
	- https://www.martinfowler.com/bliki/TestCoverage.html
	- https://en.wikipedia.org/wiki/Object-oriented_design
	- https://www.youtube.com/watch?v=4cVZvoFGJTU&feature=emb_title
	- Estrutura:
		- Arranje - cenário para o teste
		- Act - método que será testado
		- Assert - verificar se o que foi testado era o esperado

- Anotações
	- O Problema de usar o LastOrDefault() é que ele iria retornar um valor null,
	para evitar isso, colocamos um DefaultIfEmpty que devolve o que queremos caso o Default
	do Last seja disparado. Assim evitamos levantar exeções desnecessárias.

	- Boas Práticas:
		- Criar a classe de teste com o NomeClasse + Método a ser testado
		- Quando for criar o método é, Comportamento Esperado + Dado
		
	- Ciclo do TDD: 
		- basicamente, eu crio um teste que falha para codificar depois
		- Cria um novo teste sem o negocio existir;
		- Teste irá falhar;
		- Corrigir o teste;
		- O teste passar;
		- Refatorar o código;
		- Só pode ser feito refatoração se todos os testes já passaram.

	- Classes de equivlência é quando você tem a mesma expectativa (resultado) para condições
	de entrada diferentes (dados) - Given, When, Then;	
	
	I. TDD é uma prática que propõe que os testes sejam escritos antes da implementação da funcionalidade.
	III. A nomenclatura de um teste pode variar de projeto para projeto, contudo duas coisas devem ser observadas: a) a consistência nos nomes dos testes, b) as três partes de um teste (Arrange, Act, Assert).
	V. O padrão Arrange-Act-Assert determina que dividamos o teste em 3 seções: uma para definir as condições de entrada (Arrange), outra para indicar qual método está sob teste (Act) e outra para verificar as expectativas de saída (Assert).
    VI. Exceções devem ser testadas porque fazem parte do comportamento de um sistema.